generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id          String     @id @unique
  completed   Boolean    @default(false)
  createdAt   DateTime   @default(now()) @map("created_at")
  completedAt DateTime?  @map("completed_at")
  report      Json?
  success     Boolean?
  Solution    Solution[]

  @@map("jobs")
}

model Problem {
  id             String   @id @default(uuid())
  title          String
  description    String
  verified       Boolean  @default(false)
  tests          Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt
  timeLimit      Int      @map("time_limit")
  functionName   String   @map("function_name")
  memoryLimit    Int      @map("memory_limit ")
  parameterNames String[] @map("parameter_names")
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@map("problems")
}

model Solution {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  code       String
  timeTook   Float    @map("time_took")
  memoryUsed Float    @map("memory_used")
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String

  @@map("solutions")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  Problem       Problem[]
  Solution      Solution[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
